"""
    Credits to : Tiagosf00
    https://github.com/Tiagosf00/Competitive-Programming
"""
import os
import subprocess
import shutil
import argparse
from typing import Tuple, List
from pathlib import Path


# Get the path from the command line
parser = argparse.ArgumentParser(description="Create notebook from C++ files.")
parser.add_argument(
    "--path", type=str, default="algorithms/", help="Path to implementation paths"
)

parser.add_argument(
    "--confpath", type=str, default="settings/", help="Path to settings and macros"
)
args = parser.parse_args()
path = Path(args.path)
confpath = Path(args.confpath)


def cpy_template():
    # gets the path from the file gen.py
    path = Path(__file__).parent.absolute()
    template = path / "template.tex"
    notebook = path / "notebook.tex"
    shutil.copyfile(template, notebook)


def remove_aux():
    """Remove the auxiliar files generated by pdflatex"""
    to_remove = [
        "notebook.aux",
        "notebook.log",
        "notebook.toc",
        "notebook.tex",
        "texput.log",
    ]
    for item in to_remove:
        if os.path.exists(item):
            os.remove(item)


ignore_dir = ["ds-c"]


def get_dir():
    section_list = os.listdir(path)
    section = []
    for section_name in section_list:
        if (
            not os.path.isdir(os.path.join(path, section_name))
            or section_name in ignore_dir
        ):
            continue
        print(section_name)
        subsection: List[Tuple[str, str]] = []
        section_path = os.path.join(path, section_name)
        items = os.listdir(section_path)
        for file_name in items:
            print(file_name)
            if file_name.endswith(".cpp"):
                subsection.append(
                    (file_name, (path / section_name / file_name).absolute().__str__())
                )
            elif file_name.endswith(".py"):
                subsection.append(
                    (file_name, (path / section_name / file_name).absolute().__str__())
                )

        section.append((section_name, subsection))

    conf_files: List[Tuple[str, str]] = []
    for conf in os.listdir(confpath):
        conf_files.append((conf, (confpath / conf).absolute().__str__()))

    section.append(("Settings and Macros", conf_files))

    return section


def create_notebook(section):
    aux = ""
    print("Generating notebook...")
    with open(Path(__file__).parent.absolute() / "notebook.tex", "a") as texfile:
        for item, subsection in section:
            print("item: ", item, " subsection: ", subsection, flush=True)
            aux += f"\\section{{{item.replace('-', ' ').capitalize()}}}\n"
            for file, fpath in subsection:
                file_name = file
                if item != "Settings and Macros":
                    suffix = ""
                    if file.endswith(".py"):
                        suffix = " (Python)"
                    file_name, _ = os.path.splitext(file)
                    # Remove Segtree/ prefix
                    file_name = os.path.split(file_name)[1]
                    if "_" in file_name:
                        spt = "_"
                    else:
                        spt = "-"

                    file_name = " ".join([x.capitalize()
                                         for x in file_name.split(spt)])
                    file_name += suffix

                print("file_name: ", file_name,
                      " file_path: ", fpath, flush=True)
                aux += "\\includes{%s}{%s}\n" % (file_name, fpath)

        aux += "\n\\end{flushleft}\n\\end{document}\n"
        texfile.write(aux)

    print("notebook.tex created !")


if __name__ == "__main__":
    cpy_template()
    section = get_dir()
    create_notebook(section)

    script_path = Path(__file__).parent.absolute() / "notebook.tex"
    cmd = ["pdflatex", "-interaction=nonstopmode",
           "-halt-on-error", script_path]
    with open(os.devnull, "w") as DEVNULL:
        try:
            subprocess.check_call(cmd)
            subprocess.check_call(cmd)
        except Exception:
            print("Error while converting LaTex to pdf.")
            print("You can run it manually to see the error.")
            print("pdflatex -interaction=nonstopmode -halt-on-error notebook.tex")
            exit(1)

    remove_aux()

    print("Notebook successfully created !")
